// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  locations     Location[]
}

model Location {
  id             String       @id @default(uuid()) @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  invitationCode String       @default(uuid()) @db.Uuid
  name           String
  image          String?
  description    String?
  users          User[]
  cocktails      Cocktail[]
  ingredients    Ingredient[]
  tags           Tag[]
}

model Cocktail {
  id           String                   @id @default(uuid()) @db.Uuid
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  label        String
  url          String?
  image        String?
  description  String?
  instructions String?
  tags         Tag[]
  ingredients  IngredientsOnCocktails[]
  Location     Location                 @relation(fields: [locationId], references: [id])
  locationId   String                   @db.Uuid
}

model Ingredient {
  id                   String                   @id @default(uuid()) @db.Uuid
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  label                String
  description          String?
  inStock              Boolean
  cocktails            IngredientsOnCocktails[]
  alternateIngredients Ingredient[]             @relation("AlternateIngredients")
  mainIngredients      Ingredient[]             @relation("AlternateIngredients")
  Location             Location                 @relation(fields: [locationId], references: [id])
  locationId           String                   @db.Uuid
}

model IngredientsOnCocktails {
  cocktail     Cocktail   @relation(fields: [cocktailId], references: [id])
  cocktailId   String     @db.Uuid
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String     @db.Uuid
  amount       String

  @@id([cocktailId, ingredientId])
}

model Tag {
  id         String     @id @default(uuid()) @db.Uuid
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  label      String
  cocktails  Cocktail[]
  Location   Location   @relation(fields: [locationId], references: [id])
  locationId String     @db.Uuid
}
